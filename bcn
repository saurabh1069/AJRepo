# Load the Outlook COM object
Add-Type -AssemblyName 'Microsoft.Office.Interop.Outlook'
$Outlook = New-Object -ComObject Outlook.Application
$Namespace = $Outlook.GetNamespace('MAPI')

# Specify the folder path you want to read emails from
$folderPath = "Testing"

# Get the folder by path
$folder = $Namespace.GetDefaultFolder('olFolderInbox').Folders.Item($folderPath)

# Define time intervals for reminders
$firstReminderDays = 5
$secondReminderDays = 2
$thirdReminderDays = 2

# Get today's date
$today = Get-Date

# Hashtable to store the latest emails in conversations
$latestEmails = @{}

# Process emails in parallel
$emails = $folder.Items | Where-Object { $_.ReceivedTime -ge (Get-Date).AddDays(-7) }
$emails | ForEach-Object -Parallel {
    param ($email)

    if ($email.ConversationID) {
        $conversationID = $email.ConversationID
        $originalEmail = $latestEmails[$conversationID]

        if (-not $originalEmail) {
            # New conversation, store the current email as the latest
            $latestEmails[$conversationID] = $email
        } else {
            # Existing conversation, compare received times
            $originalReceivedDate = $originalEmail.ReceivedTime
            $timeSinceReceived = ($today - $originalReceivedDate).TotalDays

            if ($timeSinceReceived -ge $firstReminderDays) {
                Send-Reminder $originalEmail "Reminder 1"
            } elseif ($timeSinceReceived -ge ($firstReminderDays + $secondReminderDays)) {
                Send-Reminder $originalEmail "Reminder 2"
            } elseif ($timeSinceReceived -ge ($firstReminderDays + $secondReminderDays + $thirdReminderDays)) {
                Send-Reminder $originalEmail "Reminder 3"
                Send-Final-Email $originalEmail
            }
        }
    }
} -ThrottleLimit 5  # Adjust the ThrottleLimit based on the desired degree of parallelism

# Release COM objects
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Outlook) | Out-Null
